#!/usr/bin/perl

# list urboot hex files with size, version, features and name
#
# published under GNU General Public License, version 3 (GPL-3.0)
# author Stefan Rueger
#
# v 1.8
# 7.04.2023
# first version 16.07.2016
#

use strict;
use warnings;
use File::Basename;
use POSIX;
use Scalar::Util qw(looks_like_number);
use Getopt::Long qw(GetOptions);

my $progname = basename($0);
my $myvers = "1.07";
my $Usage = <<"END_USAGE";
Syntax: $progname {<bootloader>.hex}
Function: list urboot bootloader hex files with size, version, features and name
Options:
  -version     Print version ($myvers) and exit
  -pre=<text>  Print <text> as preamble
  -mcu=<name>  Assume the hex files were compiled for MCU <name>
  -md=url      Print neat markdown table with header (files use url)
  -check       Check rjmp op code at end (if pgm_page_write-enabled and .lst file there)
  -sort        Sort rows according to use, size, version, features, name
  -use         Print number of bytes occupied by bootloader and exit
END_USAGE

my ($version, $check, $srt, $usage, $md, $mcu, $pre, $l, $c, $t, $title, $in, $disthex, $rjmpop,
    $vers, $distelf, $pgmwriteaddr, $addrlst, @rows, $siz, $use, $ver, $fea, $nam, %legend);

my %feature = (
  'w'      => "  + `w` bootloader provides `pgm_write_page(sram, flash)` for the application at `FLASHEND-4+1`\n",
  'e'      => "  + `e` EEPROM read/write support\n",
  'u'      => "  + `u` uses urprotocol requiring `avrdude -c urclock` for programming\n",
  's'      => "  + `s` uses skeleton of STK500v1 protocol (deprecated); `-c urclock` and `-c arduino` both work\n",
  'd'      => "  + `d` dual boot (over-the-air programming from external SPI flash)\n",
  'D'      => "  + `D` dual boot with SE and SPI restoration\n",
  'f'      => "  + `f` (not recommended) dual boot without erasing trigger sector, beware the application must do so\n",
  'h'      => "  + `h` hardware boot section: make sure fuses are set for reset to jump to boot section\n",
  'j'      => "  + `j` vector bootloader: applications *need to be patched externally*, eg, using `avrdude -c urclock`\n",
  'v'      => "  + `v` vector bootloader: patches the vector table itself during upload but verification fails\n",
  'V'      => "  + `V` vector bootloader: patches the vector table itself during upload, skips verifying the first page\n",
  'p'      => "  + `p` bootloader protects itself from being overwritten\n",
  'P'      => "  + `P` vector bootloader only: protects itself and reset vector from being overwritten\n",
  'r'      => "  + `r` preserves reset flags for the application in the register R2\n",
  'a'      => "  + `a` autobaud detection (f_cpu/8n using discrete divisors, n = 1, 2, ..., 256)\n",
  'c'      => "  + `c` bootloader provides chip erase functionality (recommended for large MCUs)\n",
  '?'      => "  + `?` unable to tell from .hex file whether this feature is present\n",
  '.'      => "  + `.` unable to tell from .hex file whether this feature is present\n",
  '-'      => "  + `-` corresponding feature not present\n",
  'wdto'   => "  + `%1` watchdog timeout, ie, time window for upload after external reset\n",
  'xfcpu'  => "  + `x%1m%2` is F<sub>CPU</sub> of an external oscillator, here %1.%2 MHz\n",
  'ifcpu'  => "  + `i%1m%2` is F<sub>CPU</sub> of an internal oscillator, here %1.%2 MHz\n",
  '<fcpu'  => "  + `%1%2m%3` is F<sub>CPU</sub> of a too slow internal oscillator, here %2.%3 MHz - %p%\n",
  '>fcpu'  => "  + `%1%2m%3` is F<sub>CPU</sub> of a too fast internal oscillator, here %2.%3 MHz + %p%\n",
  'fcpux+' => "  + `12m0x` is F<sub>CPU</sub> of an external oscillator, here 12.0 MHz\n",
  'fcpui+' => "  + `9m6i` is F<sub>CPU</sub> of an internal oscillator, here 9.6 MHz\n",
  'fcpupm' => "  + `8m0j+1` is F<sub>CPU</sub> of an internal oscillator varied by some percent, here 8 MHz + 1\%\n",
  'baud+'  => "  + `%1k%2` shows the fixed communication baud rate, here %z%200 baud\n",
  'auto'   => "  + `autobaud` detects host baud rate f/8, f/16, f/24, ..., f/2048 (f=F<sub>CPU</sub>)\n",
  'auto2'  => "  + `autobaud2` detects host baud rate f/16, f/32, f/48, ..., f/4096 (f=F<sub>CPU</sub>)\n",
  'dual'   => "  + `dual` can upload from external SPI flash memory and from serial interface\n",
  'swio'   => "  + `swio` software I/O (not UART)\n",
  'uart'   => "  + `uart%1` UART number\n",
  'alt'    => "  + `alt1` alternative RX/TX pin assignment\n",
  'rxtx'   => "  + `rxd0 txd1` I/O using, in this example, lines RX `D0` and TX `D1`\n",
  'led-b1' => "  + `led%1%2` toggles %s LED on pin `%u`\n",
  'led9'   => "  + `led9` toggles an LED on, in this example, Arduino pin 9\n",
  'ledPB1' => "  + `ledPB1` toggles an LED on, in this example, pin B1\n",
  'no-led' => "  + `no-led` bootloader does not operate LEDs\n",
  'lednop' => "  + `lednop` is a template bootloader with `mov rx,rx` nops as placeholders for LED operations\n",
  'template'=>"  + `template` bootloaders contains `mov rx,rx` nops as placeholders for LED and CS operations\n",
  'csb0'   => "  + `cs%1` uses pin %u as chip select of external SPI flash memory for dual boot\n",
  'cs8'    => "  + `cs8` uses Arduino pin 8 as chip select of external SPI flash memory for dual boot\n",
  'csPB0'  => "  + `csPB0` boot uses pin B0 as chip select of external SPI flash memory for dual boot\n",
  'csnop'  => "  + `csnop` like `lednop` generates nops that can be replaced to toggle the correct CS pin\n",
  'pr'     => "  + `pr` vector bootloader protecting the reset vector\n",
  'ee'     => "  + `ee` bootloader supports EEPROM read/write\n",
  'fr'     => "  + `fr` bootloader provides non-essential code (\"frills\") for smoother error handling\n",
  'ce'     => "  + `ce` bootloader provides a chip erase command\n",
  'ur'     => "  + `ur` uses urprotocol and therefore requires `avrdude -c urclock` for programming\n",
  'aur'    => "  + `aur` autobaud and uses urprotocol\n",
  'stk500' => "  + `stk500` uses deprecated STK500v1 protocol to communicate with bootloader\n",
  'vbl'    => "  + `vbl` vector bootloader: set fuses to jump to reset, not the HW boot section\n",
  'hw'     => "  + `hw` hardware supported bootloader: set fuses to jump to the HW boot section, not to addr 0\n",
  'v2'     => "  + `v2` vector bootloader that patches application itself\n",
  'v3'     => "  + `v3` vector bootloader that patches application itself and skips verifying the first page\n",
  'fp9'    => "  + `fp9` for debugging the bootloader uses, eg, Arduino pin 9 to swing a signal of low frequency, eg, 50 Hz\n",
  'ddd'    => "  + `d` dual boot\n",
  'dur'    => "  + `dur` dual boot and uses urprotocol\n",
  'adur'   => "  + `adur` autobaud, dual boot and uses urprotocol\n",
  'min'    => "  + `min` most feature-rich bootloader for smallest achievable flash usage (implies `ur`)\n",
);

my $isauto2 = 0;

sub f {
  my $name = shift;
  if(length($name) == 1) {
    $legend{$name} = 1;
  } else {
    my ($p1, $p2, $p3);

    if(($p1) = $name =~ /_([0-9]+m?s)_/) {
      $legend{wdto} = 1;
      $feature{wdto} =~ s/%1/$p1/g;
    }
    if(($p1, $p2) = $name =~ /_x([0-9]+)m([0-9]+)_/) {
      $legend{xfcpu} = 1;
      $feature{xfcpu} =~ s/%1/$p1/g;
      $feature{xfcpu} =~ s/%2/$p2/g;
    }
    if(($p1, $p2) = $name =~ /_i([0-9]+)m([0-9]+)_/) {
      $legend{ifcpu} = 1;
      $feature{ifcpu} =~ s/%1/$p1/g;
      $feature{ifcpu} =~ s/%2/$p2/g;
    }
    if(($p1, $p2, $p3) = $name =~ /_([a-h])([0-9]+)m([0-9]+)_/) {
      $legend{'<fcpu'} = 1;
      $feature{'<fcpu'} =~ s/%1/$p1/g;
      $feature{'<fcpu'} =~ s/%2/$p2/g;
      $feature{'<fcpu'} =~ s/%3/$p3/g;
      $feature{'<fcpu'} =~ s/%n/$p3/g;
      my $perc = sprintf("%3.2f", (ord('i')-ord($p1))*1.25);
      $feature{'<fcpu'} =~ s/%p/$perc/g;
    }
    if(($p1, $p2, $p3) = $name =~ /_([j-q])([0-9]+)m([0-9]+)_/) {
      $legend{'>fcpu'} = 1;
      $feature{'>fcpu'} =~ s/%1/$p1/g;
      $feature{'>fcpu'} =~ s/%2/$p2/g;
      $feature{'>fcpu'} =~ s/%3/$p3/g;
      my $perc = sprintf("%3.2f", (ord($p1)-ord('i'))*1.25);
      $feature{'>fcpu'} =~ s/%p/$perc/g;
    }
    $legend{'fcpux+'} = 1 if $name =~ /[+_][0-9]+m[0-9]+x[+_]/;
    $legend{'fcpui+'} = 1 if $name =~ /[+_][0-9]+m[0-9]+i[+_]/;
    $legend{'fcpupm'} = 1 if $name =~ /[+_][0-9]+m[0-9]+[a-hj-q][+-][1-8]/;
    if(($p1, $p2) = $name =~ /[+_]([0-9]+)k([0-9]+)_/) {
      $legend{'baud+'} = 1;
      $feature{'baud+'} =~ s/%1/$p1/g;
      $feature{'baud+'} =~ s/%2/$p2/g;
      my $pz=$p1>0? $p1: "";
      $feature{'baud+'} =~ s/%z/$pz/g;
    }
    $legend{auto} = 1 if !$isauto2 && $name =~ /[_+]autobaud[_.]/;
    $legend{auto2} = 1 if ($isauto2 && $name =~ /[_+]autobaud[_.]/) || $name =~ /[_+]autobaud2[_.]/;
    $legend{template} = 1 if $name =~ /_template[_.]/;
    $legend{dual} = 1 if $name =~ /_dual[_.]/;
    $legend{rxtx} = 1 if $name =~ /_[rt]x[a-z][0-7][_.]/;
    $legend{swio} = 1 if $name =~ /_swio[_.]/;
    if(($p1) = $name =~ /_uart([0-9])/) {
      $legend{uart} = 1;
      $feature{uart} =~ s/%1/$p1/g;
    }
    $legend{alt} = 1 if $name =~ /_alt[0-9]/;
    $legend{ee} = 1 if $name =~ /_ee[_.]/;
    if(($p1, $p2) = $name =~ /_led([+-])([a-z][0-7])[_.]/) {
      $legend{'led-b1'} = 1;
      $feature{'led-b1'} =~ s/%1/$p1/g;
      $feature{'led-b1'} =~ s/%2/$p2/g;
      my $polarity = $p1 eq'+'? "an active-high (`+`)":  "an active-low (`-`)";
      my $pin = uc $p2;
      $feature{'led-b1'} =~ s/%s/$polarity/g;
      $feature{'led-b1'} =~ s/%u/$pin/g;
    }
    $legend{ledPB1} = 1 if $name =~ /_led[+-]P[A-Z][0-7][_.]/;
    $legend{'no-led'} = 1 if $name =~ /_no-led[_.]/;
    $legend{lednop} = 1 if $name =~ /_lednop[_.]/;
    $legend{led9} = 1 if $name =~ /_led[0-9]+[_.]/;
    if(($p1) = $name =~ /_cs([a-z][0-7])[_.]/) {
      $legend{csb0} = 1;
      $feature{csb0} =~ s/%1/$p1/g;
      my $pin = uc $p1;
      $feature{csb0} =~ s/%u/$pin/g;
    }
    $legend{csnop} = 1 if $name =~ /_csnop[_.]/;
    $legend{cs8} = 1 if $name =~ /_cs[0-9]+[_.]/;
    $legend{csPB0} = 1 if $name	=~ /_csP[A-Z][0-7][_.]/;
    $legend{fp9} = 1 if $name =~ /_fp[0-9]+[_.]/;
    $legend{fr} = 1 if $name =~ /_fr[_.]/;
    $legend{hw} = 1 if $name =~ /_hw[_.]/;
    $legend{stk500} = 1 if $name =~ /_stk500[_.]/;
    $legend{pr} = 1 if $name =~ /_pr[_.]/;
    $legend{ce} = 1 if $name =~ /_ce[_.]/;
    $legend{ur} = 1 if $name =~ /_ur[_.]/;
    $legend{aur} = 1 if $name =~ /_aur[_.]/;
    $legend{ddd} = 1 if $name =~ /_d[_.]/;
    $legend{dur} = 1 if $name =~ /_dur[_.]/;
    $legend{adur} = 1 if $name =~ /_adur[_.]/;
    $legend{v3} = 1 if $name =~ /[d_]v3[_.]/;
    $legend{v2} = 1 if $name =~ /[d_]v2[_.]/;
    $legend{vbl} = 1 if $name =~ /_vbl[_.]/;
    $legend{min} = 1 if $name =~ /_min[_.]/;
    $legend{ur} = 1 if $name =~ /_min[_.]/;
  }
  return $name;
}

$mcu="atmega328p";
$pre='';

GetOptions(
  'version' => \$version,
  'check' => \$check,
  'mcu=s' => \$mcu,
  'pre=s' => \$pre,
  'md=s' => \$md,
  'sort' => \$srt,
  'use'  => \$usage,
) or die $Usage;

$isauto2 = 1 if "_atmega103_at43usb320_at90s2313_at90s2333_at90s4433_at90s4414_at90s8515_at90s4434_at90s8535_" =~ /_${mcu}_/i;

print("$progname version $myvers\n"), exit(0) if $version;

$l = defined($md)? "|": "";
$c = defined($md)? "|": " ";
$t = defined($md)? "`": "";

use constant {
  UR_PGMWRITEPAGE   => 128, # pgm_write_page() subroutine that can be called from application at FLASHEND+1-4
  UR_AUTOBAUD       => 128, # Bootloader has autobaud detection (v7.7+)
  UR_EEPROM         =>  64, # EEPROM read/write support
  UR_URPROTOCOL     =>  32, # bootloader uses own protocol and requires avrdude -c urclock
  UR_DUAL           =>  16, # dual boot
  UR_VBLMASK        =>  12, # vector bootloader bits (point reset vector to bootloader and some interrupt vector to application)
  UR_VBLPATCHVERIFY =>  12, # patches reset/interrupt vectors and pretends original vectors on verify
  UR_VBLPATCH       =>   8, # patches reset/interrupt vectors only (expect an error on verify)
  UR_VBL            =>   4, # merely starts application through interrupt vector instead of reset (vectors must be patched externally)
  UR_NO_VBL         =>   0, # no vector bootloader support
  UR_PROTECTME      =>   2, # bootloader safeguards against overwriting itself
  UR_RESETFLAGS     =>   1, # load reset flags into register R2 before jumping to the application
  UR_HAS_CE         =>   1, # Bootloader has Chip Erase (v7.7+)
};

# default to all *.hex files if no argument given
@ARGV = <*.hex> if !@ARGV;

my ($checked, $checkedok) = (0, 0);

foreach my $fname (@ARGV) {
  next if $fname !~ /\.hex$/;
  my $flags;

  #  my $size = `avr-size $fname | cut -f2 | tail -1`;

  undef $rjmpop;
  # read intel hex file (see https://en.wikipedia.org/wiki/Intel_HEX)
  open($in, $fname) or die "$progname: cannot open $fname";
  my ($startaddr, $endaddr, $flashsize, $offset, $versionlen) = (0, 0, 0, 0, 0);
  my $lastdata;
  while(<$in>) {
    # offset address for large devices (up to 1 MB)
    $offset = hex(substr($_,9,4))*16 if /^:02....02/;
    if(/^:0[642]..F[ACE]00/i) { # either ordinary data record or version record at end
      # length of this section
      my $len = hex(substr($_, 1, 2));
      $versionlen = $len;
      # if flashsize was set then the previous section of this appearance was ordinary, set $endaddr
      $endaddr = $flashsize if $flashsize;
      $flashsize = $len+hex(substr($_,3,4))+$offset;
      # upper two bytes: capabilities and version
      $vers = hex(substr($_, 7+2*$len, 2).substr($_, 5+2*$len, 2));
      # if exists lower three nibbles of rjmp opcode 0xC.... just below version
      $rjmpop =  $len == 2? undef: lc(substr($_, 3+2*$len, 2).substr($_, 1+2*$len, 2));
      $disthex = $len == 2? undef: hex(substr($_, 4+2*$len, 1).substr($_, 1+2*$len, 2));
      # add $len-2 to start of version section to be just after rjmp; 0x9805 is the ret opcode
      $pgmwriteaddr = $len ==2 || $rjmpop eq '9805'? undef: $offset + hex(substr($_,3,4)) + $len-2 + 2*($disthex-4096);
    } elsif(/^:......00/i) { # ordinary data record
      my $len = hex(substr($_, 1, 2));
      my $addr = hex(substr($_,3,4))+$offset;
      $startaddr = $addr if !$startaddr;
      $startaddr = $addr if $addr < $startaddr;
      $addr += $len;
      $endaddr = $addr if $addr > $endaddr;
      $lastdata = $_;
    } elsif(/^:00000001FF/i) {  # EOF record
      if(!$versionlen && defined $lastdata) { # Hex file without special version record; go back to last data line
        my $len = hex(substr($lastdata, 1, 2));
        # Upper two bytes: capabilities and version
        $vers = hex(substr($lastdata, 7+2*$len, 2).substr($lastdata, 5+2*$len, 2));
        $flashsize = $len+hex(substr($lastdata,3,4))+$offset if !$flashsize;
        if(int($vers/256) >= 7*8+7) { # could be urboot
          $versionlen = 6;
          $endaddr -= $versionlen;
          $rjmpop =  lc(substr($lastdata, 3+2*$len, 2).substr($lastdata, 1+2*$len, 2));
          $disthex = hex(substr($lastdata, 4+2*$len, 1).substr($lastdata, 1+2*$len, 2));
          # add $len-2 to start of version section to be just after rjmp; 0x9805 is the ret opcode
          $pgmwriteaddr = $len ==2 || $rjmpop eq '9805'? undef: $offset + hex(substr($lastdata,3,4)) + $len-2 + 2*($disthex-4096);
        }
      }
    }
  }
  # print "@@@ $startaddr, $endaddr, $versionlen, $flashsize\n";
  close $in;

  # size of bootloader/space it occupies
  $siz = $endaddr+$versionlen-$startaddr; $siz = 9999 if $siz <= 0;
  $use = $flashsize-$startaddr; $use = 9999 if $use <= 0;
  if(!defined($vers) || $vers == 0xffff || $vers < 4*256+1) { # Optiboot puts the version number in binary from v4.1
    $ver = "x0.0"; $fea = ".........";
    f('.');
  } elsif(int($vers/256) >= 7*8+6) { # from version 7.6 onwards URPROTOCOL has its own bit
    my $v77 = int($vers/256) >= 7*8+7;
    $ver = sprintf("u%d.%d", int($vers/(8*256)), ($vers/256)&7);
    $fea = f((!$v77 && ($vers & UR_PGMWRITEPAGE)) || ($v77 && defined($rjmpop) && substr($rjmpop, 0, 1) eq 'c')? 'w': '-');
    $fea .= f($vers & UR_EEPROM? 'e': '-');
    $fea .= f($vers & UR_URPROTOCOL? 'u': 's');
    $fea .= f($vers & UR_DUAL? 'd': '-');
    $flags = ($vers/UR_VBL) & 3;
    $fea .= f($flags==3? 'V': $flags==2? 'v': $flags? 'j': 'h'); # V = VBL, patch & verify, v = VBL, patch only, j = VBL, jump only, h = hw boot support
    $fea .= f(!$v77? ($vers & UR_PROTECTME? 'p': '-'): ($vers & UR_PROTECTME? 'P': 'p'));
    $fea .= f((!$v77 && ($vers & UR_RESETFLAGS)) || $v77? 'r': '-');
    $fea .= f($v77 && ($vers & UR_AUTOBAUD)? 'a': '-');
    $fea .= f($v77 && ($vers & UR_HAS_CE)? 'c': $v77? '-': '.');
  } elsif(int($vers/256) >= 7*8+2) { # from version 7.2 onwards urboot versioning
    $ver = sprintf("u%d.%d", int($vers/(8*256)), ($vers/256)&7);
    $fea = f($vers & UR_PGMWRITEPAGE? 'w': '-');
    $fea .= f($vers & UR_EEPROM? 'e': '-');
    $flags = ($vers/UR_DUAL) & 3;
    $fea .= '-';
    $fea .= f($flags==3? 'D': $flags==2? 'd': $flags? 'f': '-'); # D = Dual boot with SE & SPI restoration, d = dual boot with SE, f = dual boot only
    $flags = ($vers/UR_VBL) & 3;
    $fea .= f($flags==3? 'V': $flags==2? 'v': $flags? 'j': 'h'); # V = VBL, patch & verify, v = VBL, patch only, j = VBL, jump only, h = hw boot support
    $fea .= f($vers & UR_PROTECTME? (int($vers/256) >= 7*8+5? 'u': 'p'): (int($vers/256) >= 7*8+5? 's': '-'));
    $fea .= f($vers & UR_RESETFLAGS? 'r': '-');
    $fea .= '--';
  } else {
    $ver = sprintf("o%d.%d", int($vers/256), $vers & 0xff);
    $fea = "-.s-.-r--";
    f('s'); f('r'); f('.'); f('-');
  }
  $nam = $fname;
  f(basename($fname));

  push @rows, [$siz, $use, $ver, $fea, $nam];

  # check .lst file for pgm_write_page symbol
  if($check && defined($pgmwriteaddr)) {
    $fname =~ s/.hex$/.lst/;
    $addrlst = undef;
    if(open($in, $fname)) {
      while(<$in>) {
        chomp;
        if(/^00[0-9a-f]{2,6} <pgm_write_page>:/) {
          $addrlst = hex(substr($_,2,6));
          last;
        }
      }
      close $in;
      if(defined($addrlst)) {
        printf "warning rjmp inconsistency c%03x: addr %04x (hex) vs %04x (lst) $fname\n", $disthex, $pgmwriteaddr, $addrlst
          if $pgmwriteaddr != $addrlst;
        $checked++;
        $checkedok++ if $pgmwriteaddr == $addrlst;
      }
    }
  }
}

print $checked != $checkedok? "$progname: rjmp pgm_write_page() inconsistencies; you need to run make/makeall once more?\n":
  "$progname: rjmp pgm_write_page() entries in $checked bootloaders look good\n"
  if $check && $checked;

if(!$check) {
  if($srt) {
    @rows = sort { $a->[1] <=> $b->[1] or  $a->[0] <=> $b->[0] or $b->[2] cmp $a->[2] or $a->[3] cmp $b->[3] or $a->[4] cmp $b->[4] } @rows;
  }
  if(defined($usage) && @rows) {
    if(@rows == 1) {
      printf "%d\n", $rows[0]->[1];
    } else {
      printf "%d %s\n", $_->[1], $_->[4] for @rows;
    }
    exit
  }

  print "$pre\n\n" if $pre;

  if(defined($md) && @rows) {
    print("|Size|Usage|Version|Features|Hex file|\n");
    print("|:-:|:-:|:-:|:-:|:--|\n");
  }
  for my $line (@rows) {
    $line->[4] = sprintf("[%s](%s/%s)", $line->[4], forurl($md), forurl($line->[4])) if defined($md) && $md ne "";
    printf("$l%d$c%d$c%s$c$t%s$t$c%s$l\n", @{$line});
  }
  if(defined($md) && @rows) {
    print "\n".
     "- **Size:** Bootloader code size including small table at top end\n".
     "- **Usage:** How many bytes of flash are needed, ie, HW boot section or a multiple of the page size\n".
     "- **Version:** For example, u7.6 is an urboot version, o5.2 is an optiboot version\n".
     "- **Features:**\n";
     print $feature{$_} for grep { $legend{$_} } (qw(w e u s d D f h j v V p P r a c ? . -));
     print "- **Hex file:** often qualified by the MCU name and/or configuration\n";
     print $feature{$_} for grep { $legend{$_} } (qw(wdto xfcpu ifcpu <fcpu >fcpu fcpux+ fcpui+ fcpupm baud+ auto auto2 swio uart alt rxtx
       led-b1 led9 ledPB1 lednop no-led csb0 cs8 csPB0 csnop template dual fp9 pr ee ce fr vbl hw ur aur dur adur stk500 ddd v2 v3 min));
  }
}

exit($checked != $checkedok);

sub getinteger {
  my $n = shift;
  my $cp = $n;

  if($n =~ s/^(0x|$)//i) {      # hex number?
    $n = $n =~ /^[0-9a-f]{1,}$/i? hex($n): $cp;
  } elsif($n =~ s/^0(.)/$1/) {  # oct number?
    $n = $n =~ /^[0-7]{1,}$/i? oct($n): $cp;
  }
  $n = 0 if !looks_like_number $n;

  return floor($n);
}

sub forurl {
  local $_ = shift;
  s/%/%25/g;
  s/\+/%2B/g;
  return $_;
}
