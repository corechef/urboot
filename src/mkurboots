#!/bin/bash

# Published under GNU General Public License, version 3 (GPL-3.0)
# Author Stefan Rueger <stefan.rueger@urclocks.com>
# v 1.3 (first version 01.01.2023)
# 08.03.2023

# Compile bootloaders for one MCU

progname=$(basename $0)

Usage() {
cat <<END
Syntax: $progname [<opt>] <mcu>
Function: create bootloaders for the 8-bit AVR MCU <mcu> (all lower case)
Option:
    -m <dir>  Directory in which mcu bootloaders are created (default mcus)
    -b <dir>  Directory in which board bootloaders are created (default boards)
    -c <dir>  Directory in which core bootloaders are created (default cores)
    -f <fcpu> Only create bootloaders for a F_CPU subset, eg, -f auto,16000000,8000000
    -B <baud> Only create bootloaders for a baud rate subset, eg, -B auto,115200,38400
    -d        Dry run: show which bootloaders would be created
    -g <proj> Github project (default urboot.hex) for links in README.md
END
}

shopt -s extglob

# Maximum allowed UART/SWIO baud rate quantisation errors in ppm (22000 is 2.2%)
# External oscillators are relatively precise, can afford higher quantisation error
maxexterror=22000
maxinterror=6000

run=1
mcu_bls=mcus
board_bls=boards
core_bls=cores
fcpulist=""
baudlist=""
project=urboot.hex

while getopts ":dm:b:c:f:B:g:" opt; do
  case ${opt} in
    m) mcu_bls=$OPTARG
        ;;
    b) board_bls=$OPTARG
        ;;
    c) core_bls=$OPTARG
        ;;
    f) fcpulist=$OPTARG
        ;;
    B) baudlist=$OPTARG
        ;;
    d) run=0
        ;;
    g) project=$OPTARG
        ;;
    --) shift;
        break
        ;;
   \?) echo "Invalid option: $OPTARG" 1>&2
       Usage 1>&2; exit 1
       ;;
   : ) echo "Invalid option: $OPTARG requires an argument" 1>&2
       Usage 1>&2; exit 1
       ;;
  esac
done
shift $((OPTIND -1))

if [ $# != 1 ]; then Usage 1>&2; exit 1; fi


mcu="$1"

####
# Some intell about parts in general
#

source ur_avrintel

####
# setarray arr , 1,2,3,
# Split a string into an array
#

setarray(){ declare -n a=$1; local IFS=$2 -; set -f; a=($3); }


####
# Set out for which targets, F_CPUs, baud rates and I/O lines (for SW I/O) to compile


####
# Popular external Fcpus
#
fcpus=(24000000 22118400 20000000 18432000 16000000 14745600 12000000 11059200 10000000 9216000 \
  8000000 7372800 6000000 5529600 5000000 4608000 4000000 3686400 3000000 2764800 2500000 2304000 \
  2000000 1843200 1500000 1382400 1000000 921600 500000 460800 250000 230400 125000)

# Add internal Fcpus
setarray internalfcpu / "${intfcpus[$mcu]}"
for ifcpu in ${internalfcpu[@]}; do
  # Adding +8 also generates b/l for Fcpu +/-1.25%, Fcpu +/- 2.5%, ... Fcpu +/- 10.00%
  if [[ $ifcpu -gt 30000 ]]; then
    fcpus+=($ifcpu+8)
  fi
done


####
# Map F_CPU to baud rates: compile for these combinations
# Many are redundant: eg, 16 MHz @ 115200 baud is the same as 8 MHz @ 57600 baud
#
declare -A baud

allbauds=115200/76800/57600/38400/28800/19200/14400/9600/7200/4800/2400/1800/1200/600/300
extbauds=1000000/500000/250000/125000/921600/576000/460800/230400

baud[auto]=auto
for fcpu in ${fcpus[@]}; do
  # External oscillators get higher baud rates too
  if [[ $fcpu == *+[0-8] ]]; then baud[$fcpu]=$allbauds; else baud[$fcpu]=$extbauds/$allbauds; fi
done

# List of considered F_CPUs in descending order
fcpus=($(printf '%s\n' "${!baud[@]}" | sort -rn))

# Remove computation for F_CPU values not mentioned in -f
if [[ -n $fcpulist ]]; then
  setarray flist , "$fcpulist"
  declare -A fcpuok
  for ff in ${flist[@]}; do
     fcpuok[$ff]=1;
  done
  for fcpu in ${!baud[@]}; do
     if [[ -z ${fcpuok[$fcpu]} ]]; then
       unset baud[$fcpu]
     fi
  done
fi

# Create list of -B baud rates
declare -A baudok
if [[ -n $baudlist ]]; then
  setarray blist , "$baudlist"
  for bb in ${blist[@]}; do
     baudok[$bb]=1
  done
fi

# echo ${fcpus[@]}
# for bb in ${!baud[@]}; do
#   echo $bb ${baud[$bb]}
# done
# echo ${!fcpuok[@]}

####
# Urboot configurations considered
#
declare -A config

# Vector bootloaders
        config[_]="VBL=1                EEPROM=0 CHIP_ERASE=0"
      config[_pr]="VBL=1 PROTECTRESET=1 EEPROM=0 CHIP_ERASE=0"
   config[_pr_ce]="VBL=1 PROTECTRESET=1 EEPROM=0 CHIP_ERASE=1"
   config[_pr_ee]="VBL=1 PROTECTRESET=1 EEPROM=1 CHIP_ERASE=0"
config[_pr_ee_ce]="VBL=1 PROTECTRESET=1 EEPROM=1 CHIP_ERASE=1"

# Hardware supported bootloaders
if [[ minbootsz[$mcu] -gt 0 ]]; then
  if [[ minbootsz[$mcu] -eq 256 ]]; then
      config[_hw]="VBL=0 EEPROM=0 CHIP_ERASE=0"
  fi
config[_ee_ce_hw]="VBL=0 EEPROM=1 CHIP_ERASE=1"
fi


####
# Known boards
#

# At least generate two bootloaders: no LED and a template bootloader
board=no-led:BLINK=0/lednop:TEMPLATE=1

# Various boards have the LED on different pins, some low active
if [[ $mcu == atmega328p ]]; then
  board+=/urclock,timeduino,jeenode:LEDPOLARITY=-1_LED=AtmelPB1
  board+=/anarduino,moteino:LED=AtmelPB1
  board+=/urclockusb:LED=AtmelPD5
  board+=/ursense:LEDPOLARITY=-1_LED=AtmelPD5
  board+=/uno,rbbb,promini,minicore:LED=AtmelPB5
  board+=/dual:TEMPLATE=1_DUAL=1
  board+=/urclock,timeduino:LEDPOLARITY=-1_LED=AtmelPB1_SFMCS=AtmelPB0_DUAL=1
  board+=/anarduino:LED=AtmelPB1_SFMCS=AtmelPD5_DUAL=1
  board+=/moteino:LED=AtmelPB1_SFMCS=AtmelPB0_DUAL=1
  board+=/urclockusb:LED=AtmelPD5_SFMCS=AtmelPB0_DUAL=1
  board+=/ursense:LEDPOLARITY=-1_LED=AtmelPD5_SFMCS=AtmelPB0_DUAL=1
fi
if [[ $mcu == atmega328pb ]]; then
  board+=/uno,minicore:LED=AtmelPB5
fi
if [[ $mcu == attiny85 ]]; then
  board+=/digispark:LED=AtmelPB1
fi
if [[ $mcu == attiny88 ]]; then
  board+=/mh-tiny:LED=AtmelPD0
fi
if [[ $mcu == attiny167 ]]; then
  board+=/digispark-pro:LED=AtmelPB1
fi
if [[ $mcu == attiny84 ]]; then
  board+=/luminet:LED=AtmelPA4
fi
if [[ $mcu == atmega1284p ]]; then
  board+=/bobuino,mighty1284,wildfire-v2,mightycore:LED=AtmelPB7
  board+=/mightycore:LED=AtmelPB0
  board+=/wildfire:LED=AtmelPB5
  board+=/moteinomega:LED=AtmelPD7
  board+=/urclockmega:LED=AtmelPC7
  board+=/dual:TEMPLATE=1_DUAL=1
  board+=/moteinomega:LED=AtmelPD7_SFMCS=AtmelPC7_DUAL=1
  board+=/urclockmega:LED=AtmelPC7_SFMCS=AtmelPB3_DUAL=1
fi
if [[ $mcu == atmega644p ]]; then
  board+=/sanguino,mightycore:LED=AtmelPB0
  board+=/mightycore:LED=AtmelPB7
fi
if [[ $mcu == atmega2560 ]]; then
  board+=/mega-r3,megacore:LED=AtmelPB7
fi
if [[ $mcu == atmega1280 ]]; then
  board+=/mega1280,megacore:LED=AtmelPB7
fi

# Treat MightyCore, MiniCore, MegaCore and MajorCore initially as boards (note some are already subsumed above)
if [[ /atmega1284/atmega644a/atmega324pb/atmega324pa/atmega324p/atmega324a/atmega164p/atmega164a/atmega32/atmega16/atmega8535/ =~ /$mcu/ ]]; then
  board+=/mightycore:LED=AtmelPB0
  board+=/mightycore:LED=AtmelPB7
elif [[ /atmega328/atmega168pb/atmega168p/atmega168/atmega88pb/atmega88p/atmega88/atmega48pb/atmega48p/atmega48/atmega8/ =~ /$mcu/ ]]; then
  board+=/minicore:LED=AtmelPB5
elif [[ /atmega6490p/atmega6490/atmega6450p/atmega6450/atmega3290p/atmega3290/atmega3250p/atmega3250/atmega640/ =~ /$mcu/ ]]; then
  board+=/megacore:LED=AtmelPB7
elif [[ /atmega2561/atmega1281/atmega649p/atmega649/atmega645p/atmega645/atmega329p/atmega329/atmega325p/atmega325/atmega169p/atmega169a/atmega165p/atmega165a/atmega128/atmega64/at90can128/at90can64/at90can32/ =~ /$mcu/ ]]; then
  board+=/megacore:LED=AtmelPB5
elif [[ /atmega162/atmega8515/ =~ /$mcu/ ]]; then
  board+=/majorcore:LED=AtmelPB0
elif [[ /attiny13/attiny13a/ =~ /$mcu/ ]]; then
  board+=/microcore:LED=AtmelPB2
fi

####
# Board variants and configurations for *this* MCU
#
declare -A bcfg
declare -A bnames
declare -A bevery=([no-led]=1, [lednop]=1, [dual]=1)

allboards=()
setarray brd / "$board"
for bb in ${brd[@]}; do
  bcfg[$bb]=${bb#*:}
  [[ ! "${bcfg[$bb]}" == *BLINK=* ]] && bcfg[$bb]+=_BLINK=1
  bnames[$bb]=${bb%:*}
  # Unless it's no-op, lednop or dual add board names to list of all boards
  if [[ -z ${bevery[${bnames[$bb]}]} ]]; then
    setarray brdlist , "${bnames[$bb]}"
    allboards+=(${brdlist[@]})
  fi
done

# All the I/O specs for *this* MCU
setarray iospecs \| "${mcuio[$mcu]}"

# Variation of autobaud on certain parts that can only detect fcpu/16, fcpu/32, fcpu/24, ...
autovar=; [[ /atmega103/at43usb320/at90s2313/at90s2333/at90s4433/at90s4414/at90s8515/at90s4434/at90s8535/ =~ /$mcu/ ]] && autovar=2

####
# Set global variables based on $fbase/$df/$ftype/$b
#  - fcpu ($fbase + df*1.25 percent)
#  - fbfilenm (autobaud or sth like j8m0_57k6)
#  - fbgitdir (path element for sorted display in git, eg, internal_oscillator_j+1.25%/+8m000000_hz/++57k2_baud)
#  - fbcomdir (path element for machine readability, eg, internal_oscillator/8100000_hz/57200_baud)

mkfbvars() {
  local fbase=$1
  local df=$2
  local ftype=$3
  local b=$4

  fcpu=$(($fbase + $df*125*$fbase/10000))

  local fchr=
  local fpercent=
  local ftypedir=
  if [[ $ftype == i ]]; then
    fchr=${alphabet[$((8+$df))]}
    if [[ $df -ne 0 ]]; then
      xp=$(($df*125)); xp=${xp::-2}.${xp: -2}
      fpercent=$(printf "%+3.2f%%" $xp)
    fi
    ftypedir=internal_oscillator
  elif [[ $ftype == x ]]; then
    fchr=x
    ftypedir=external_oscillator
  fi

  local frq="$fbase";
  while [[ ${#frq} -lt 7 ]]; do frq="0$frq"; done
  frq="${frq::-6}m${frq: -6}"
  local fcpudirnm=$frq
  [[ $1 -lt 10000000 ]] && fcpudirnm="+$frq"
  # Delete trailing zeros except the least one
  frq="${frq%%+(0)}"
  [[ ${frq: -1} == m ]] && frq=${frq}0
  local fcpunm="$frq"

  local bd="$b";
  while [[ ${#bd} -lt 4 ]]; do bd="0$bd"; done
  bd="${bd::-3}k${bd: -3:-2}"
  local baudnm="$bd"
  while [[ ${#bd} -lt 6 ]]; do bd="+$bd"; done
  local bauddirnm="$bd"

  if [[ $ftype == a ]]; then
    fbfilenm=autobaud$autovar
    fbgitdir=autobaud
    fbcomdir=autobaud
  else
    fbfilenm=$fchr${fcpunm}_$baudnm
    fbgitdir=${ftypedir}_$fchr$fpercent/${fcpudirnm}_hz/${bauddirnm}_baud
    fbcomdir=$ftypedir/${fcpu}_hz/${b}_baud
  fi
}


####
# Set a global variable ioport for use in file and directory names from make options
#
mkioport() {
  ioport="$1"
  ioport=${ioport/SWIO=1/_swio}
  ioport=${ioport/UARTNUM=/_uart}
  ioport=${ioport/UARTALT=0/}
  ioport=${ioport/UARTALT=/_alt}
  ioport=${ioport/RX=AtmelP/_rx}
  ioport=${ioport/TX=AtmelP/_tx}
  ioport=${ioport// /}
  ioport=${ioport,,}
  ioport=${ioport:1}
}

####
# Construct a global variable filename for the basename of the bootloader
# Also set global variables shortname, ioport and pinconfig. Example paramters
#
# atmega328p x24m0_1000k0 LED=AtmelPB1_BLINK=1 _ee_ce_hw_stk500 'UARTNUM=0 RX=AtmelPD0 TX=AtmelPD1' 1S
#
mkfilename() {
  local part=${nickname[$1]}
  [[ -z $part ]] && part=$1

  # echo "@ $1 $2 $3 $4 '$5' $6"

  pinconfig=$3
  [[ "$pinconfig" == TEMPLATE=1_BLINK=1 ]] && pinconfig=_lednop
  [[ "$pinconfig" == BLINK=0 ]] && pinconfig=_no-led
  pinconfig=${pinconfig/_BLINK=?/}
  [[ "$pinconfig" == TEMPLATE=1_DUAL=1 ]] && pinconfig=_template_dual
  pinconfig=${pinconfig/LEDPOLARITY=-1_LED=AtmelP/_led-}
  pinconfig=${pinconfig/LED=AtmelP/_led+}
  pinconfig=${pinconfig/_SFMCS=AtmelP/_cs}
  pinconfig=${pinconfig/_DUAL=1/_dual}
  pinconfig=${pinconfig,,}
  pinconfig=${pinconfig:1}

  mkioport "$5"

  filename="urboot_${part}_$6_$2_${ioport}_$pinconfig"
  [[ "$4" != _ ]] && filename+=$4
  filename=${filename,,}
  filename=${filename// /_}     # Sanity, should not be necessary

  shortname=urboot_$1           # Must include the part to enable parallising in mkallbootloaders
  [[ "$4" != _ ]] && shortname+=$4
}

declare -A dirwdto

dirwdto[250MS]=watchdog_250_ms
dirwdto[500MS]=watchdog_0.5_s
dirwdto[1S]=watchdog_1_s
dirwdto[2S]=watchdog_2_s
dirwdto[4S]=watchdog_4_s
dirwdto[8S]=watchdog_8_s


alphabet=({a..z})

declare -A duplicate
declare -A hexdirs
declare -A fmtdirs
declare -A divseen
declare -A equivalent

topmdir="$mcu_bls/$mcu"
topbdir="$board_bls/_Board_/$mcu"
topcdir="$core_bls/_Core_/$mcu"

for fc in ${fcpus[@]}; do
  if [[ $fc == auto ]]; then
    ftype=a
    fbase=16000000
    ndf=0
  elif [[ $fc == *+[0-8] ]]; then
     # 9600000+8 means loop F_cpu from F_cpu-10% to F_cpu+10% in steps of 1.25%
    ftype=i
    fbase=${fc%??}
    ndf=${fc: -1}
    maxerr=maxinterror
  else
    ftype=x
    fbase=$fc
    ndf=0
    maxerr=maxexterror
  fi

  setarray bauds / "${baud[$fc]}"
  for b in ${bauds[@]}; do
    if [[ -n $baudlist && -z ${baudok[$b]} ]]; then
      continue
    fi

    # Ensure SWIO quantisation error can be under maxinterr ppm, ie, 0.5/cycles < maxinterr ppm.
    # Using cycles = fcpu/br requires that for all internal oscillator Fcpu variations must hold
    # br < Fcpu*maxinterror/500000
    if [[ $ftype == i && $b -ge $((($fbase-$ndf*125*$fbase/10000)*$maxinterror/500000)) ]]; then
      continue
    fi

    # Limit baud rates to be not smaller than f_cpu/1024
    if [[ $fc != auto && $b -lt $(($fbase/1024)) ]]; then
      continue
    fi

    for (( df=-$ndf; df<=$ndf; df++ )); do
      mkfbvars $fbase $df $ftype $b
      preamble="$mcu"
      if [[ $b == auto ]]; then
        br=AUTOBAUD=1
        preamble="Note that autobaud bootloaders normally can only detect host baud rates = f/8, f/16, ... f/2048 +/- 1.5%, where f=F<sub>CPU</sub>."
        preamble+=" Internal oscillators have a high unknown deviation: baud rates under f/260 are recommended for these."
      else
        br=BAUD_RATE=$b
        # Can this F_CPU/baud rate combo later be created from an existing one?
        # Bootloaders are the same if quotient $fcpu/$b and oscillator type are the same
        div=$((100*$fcpu/$b))/$ftype
        if [[ -n ${divseen[$div]} ]]; then
          # No need to compile a bootloader for this combo, just memorise which one to link to
          equivalent[$fbase/$df/$ftype/$b]=${divseen[$div]}
          continue
        fi
      fi

      for io in "${iospecs[@]}"; do
        mkioport "$io"; dirport="$ioport"
        thisio="$io"
        if [[ $b == auto ]]; then
          # Autobaud needs UART and must have RX in I/O space: exclude ports H..L
          if [[ ${io:0:4} == SWIO ]]; then
            continue
          fi
          if [[ $io =~ RX=AtmelP[H-L] && "${uarttype[$mcu]}" -lt 3 ]]; then
            continue
          fi
        else
          # Classic or LIN UART experiences too high baud rate error for this F_CPU/baud combo?
          if [[ ${thisio:0:4} == UART && $(bauderror -am -f$fcpu -b$b $mcu) -gt $maxerr ]]; then
            # Switch to SWIO instead of using the UART
            thisio=${thisio/UARTNUM=?/SWIO=1}
            thisio=${thisio/UARTALT=?/}
          fi

          if [[ ${thisio:0:4} == SWIO ]]; then
            # Is the SWIO baud rate too high or too low?
            if [[ $(bauderror -sam -f$fcpu -b$b $mcu) -gt $maxerr ]]; then
              continue
            fi
            # Also needs RX/TX in I/O space: exclude ports H..L
            if [[ $io =~ [RT]X=AtmelP[H-L] && "${uarttype[$mcu]}" -lt 3 ]]; then
              continue
            fi
            preamble=$(bauderror -s -v -f$fcpu -b$b $mcu)
          else
            preamble=$(bauderror    -v -f$fcpu -b$b $mcu)
          fi
        fi

        if [[ -z ${divseen[$div]} ]]; then
          divseen[$div]=$fbase/$df/$ftype/$b
        fi

        for wdto in 1S 2S; do
          for bb in ${brd[@]}; do
            for cfg in ${!config[@]}; do
              extra="AUTOFRILLS=0,6,8..10,5,4,3,2"
              [[ ${minbootsz[$mcu]} -gt 4096 && ${config[$cfg]} == *VBL=0* ]] && extra+=" PGMWRITEPAGE=0"
              mkfilename "$mcu" "$fbfilenm" "${bcfg[$bb]}" "$cfg" "$thisio" "$wdto"
              args="MCU=$mcu "WDTO=$wdto" F_CPU=${fcpu}L $br $thisio ${config[$cfg]} ${bcfg[$bb]//_/ } $extra NAME=$filename"
              if [[ $run -eq 1 ]]; then
                { echo make $args; make $args; } >& $filename.out
                if [[ ! -r $filename.hex ]]; then
                  echo warning compilation for $filename failed
                  continue
                fi

                # Subtle but important differences in how directories are named
                mdir="$topmdir/${dirwdto[$wdto]}/$fbgitdir/$dirport/$pinconfig"
                mfmt="$topmdir/${dirwdto[$wdto]}/%fbgitdir/$dirport/$pinconfig"
                bdir="$topbdir/${dirwdto[$wdto]}/$fbgitdir/$dirport/$pinconfig"
                bfmt="$topbdir/${dirwdto[$wdto]}/%fbgitdir/$dirport/$pinconfig"
                cdir="$topcdir/${dirwdto[$wdto]}/$fbcomdir/$dirport/$pinconfig"
                cfmt="$topcdir/${dirwdto[$wdto]}/%fbcomdir/$dirport/$pinconfig"

                if [[ -z ${hexdirs[$mdir]} ]]; then
                  mkdir -p "$mdir"
                  fmtdirs[$mfmt]=1
                  hexdirs[$mdir]="$preamble"
                fi
                mv $filename.{hex,out,elf,lst} "$mdir/"
                if [[ -n ${bevery[${bnames[$bb]}]} ]]; then
                  # Make bootloader available under all boards for this MUC
                  lnlist=(${allboards[@]})
                else
                  # Make bootloader only available under aliased boards/cores directories
                  setarray lnlist , "${bnames[$bb]}"
                fi
                for ba in ${lnlist[@]}; do
                  if [[ $ba/ =~ core/ ]]; then
                    badir=${cdir/_Core_/$ba}
                    bafmt=${cfmt/_Core_/$ba}
                    banam=$shortname
                  else
                    badir=${bdir/_Board_/$ba}
                    bafmt=${bfmt/_Board_/$ba}
                    banam=$filename
                  fi
                  if [[ -z ${hexdirs[$badir]} ]]; then
                    mkdir -p $badir
                    fmtdirs[$bafmt]=1
                    hexdirs[$badir]="$preamble"
                  fi
                  for ext in hex out elf lst; do
                    ln -f $mdir/$filename.$ext $badir/$banam.$ext
                  done
                done
              else
                echo make $args
                # echo "$mdir/$filename.hex"
                if [[ -n ${duplicate[$filename]} ]]; then
                  echo duplicate $filename ${duplicate[$filename]}
                  echo duplicate $filename $args
                else
                  duplicate[$filename]="$args"
                fi
              fi
            done
          done
        done
      done
    done
  done
done

if [[ $run -eq 1 ]]; then
  # Copy equivalent bootloaders over from ${equivalent[$combo]} to $combo
  for combo in ${!equivalent[@]}; do
    # echo Copy ${equivalent[$combo]} to $combo
    setarray fcpubd / "${equivalent[$combo]}"
    mkfbvars ${fcpubd[@]}
    srcfbgitdir=$fbgitdir
    srcfbcomdir=$fbcomdir
    srcfbfilenm=$fbfilenm

    setarray fcpubd / "$combo"
    mkfbvars ${fcpubd[@]}

    for dd in  ${!fmtdirs[@]}; do
      srcdir=${dd/\%fbgitdir/$srcfbgitdir}
      srcdir=${srcdir/\%fbcomdir/$srcfbcomdir}
      dstdir=${dd/\%fbgitdir/$fbgitdir}
      dstdir=${dstdir/\%fbcomdir/$fbcomdir}

      if [[ -d "$srcdir" ]]; then
        if [[ -z ${hexdirs["$dstdir"]} ]]; then
          mkdir -p "$dstdir"
          hexdirs["$dstdir"]="${hexdirs[$srcdir]}"
          if [[ -z ${hexdirs["$dstdir"]} ]]; then
            echo "Warning: no preamble for $srcdir"
          fi
        fi
        for src in "$srcdir"/*; do
          if [[ -r "$src" ]]; then
            fn=${src##*/}
            dst="$dstdir/${fn/$srcfbfilenm/$fbfilenm}"
            if [[ ! -r "$dst" ]]; then
              ln "$src" "$dst"
            fi
          fi
        done
#     else   # Can issue false warnings, eg, when autobaud or swio has tx/rx on ports H-L
#       echo "Warning: source directory $srcdir does not exist"
      fi
    done
  done

  # Check .hex files and generate README.md files
  tmp=$(mktemp "/dev/shm/$progname.XXXXXX")
  trap "rm -f $tmp" EXIT
  here=$(pwd)

  for dir in "${!hexdirs[@]}"; do
    cd "$dir"; {
      "$here/hexls" -pre="${hexdirs[$dir]}" -sort -md "https://raw.githubusercontent.com/stefanrueger/$project/main/$dir" *.hex >$tmp
      order=($(sed -n "s/.*\[\([^]]*\).hex\].*/\1.out/p" $tmp))
      cat $tmp
      echo -e "\n\nNote below that baud rate and F<sub>CPU</sub> may be different from the path name's as long as the quotient F<sub>CPU</sub>/baud rate is the same.\n\n### Make commands\n\`\`\`"
      grep -h ^make.MCU= ${order[@]}
      echo -e "\`\`\`\n\n### Avr-gcc commands\n\`\`\`"
      grep -h avr-gcc ${order[@]}
      echo -e "\`\`\`\n"
    } >README.md
    echo $dir $("$here/hexls" -c *.hex) >>/tmp/hex-check.txt
    cd "$here"
  done
  hash cmpls 2>/dev/null && cmpls -p $mcu_bls/$mcu | grep \\.hex >>/tmp/equivalent-hex-files.txt
fi
